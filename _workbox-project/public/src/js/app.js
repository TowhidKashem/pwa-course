let defferedPrompt;

if ('serviceWorker' in navigator) {
  navigator.serviceWorker
    .register('/service-worker.js')
    .then(() => console.log('service worker registered!'))
    .catch(error => console.error(error));
}

// Delaying add to homepage banner
window.addEventListener('beforeinstallprompt', event => {
  console.log('beforeinstallprompt fired');
  event.preventDefault();
  defferedPrompt = event;
  return false;
});

//*---------------- Notifications ----------------*//

// This function asks the user for permissions to show notifications, once granted it will never ask again and go straight to the else block
function askForNotificationPermission() {
  Notification.requestPermission(result => {
    console.log('User Choice:', result);

    if (result !== 'granted') {
      console.log('No notification permission granted!');
    } else {
      console.log('User choice is granted!');
      // sendNotification();
      configurePushSubscription();
    }
  });
}

//*---------------------------------------------------------

if ('Notification' in window && 'serviceWorker' in navigator) {
  const notificationBtns = document.querySelectorAll('.enable-notifications');

  notificationBtns.forEach(btn => {
    btn.classList.add('show');
    btn.addEventListener('click', askForNotificationPermission);
  });
}

// This function sends a push notification
function sendNotification() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then(serviceWorkerRegistration => {
      const title = '[SW] Successfully Subscribed!';

      const options = {
        body: 'You successfully subscribed to our notification service!',

        // Following are additional options that some devices show while others don't, so put all critical info in the title and body which all devices show
        icon: '/src/images/icons/app-icon-96x96.png',
        image: '/src/images/sf-boat.jpg',
        dir: 'ltr',
        lang: 'en-US',
        vibrate: [100, 50, 200], // Vibration pattern, e.g. virbate for 100 milliseconds, pause for 50, then vibrate again for 200 milliseconds
        badge: '/src/images/icons/app-icon-96x96.png', // Black and white icon which shows in top bar on Android (96x96 recomended)

        // Following are additional options important for not spamming users
        tag: 'confirm-notification', // acts as ids, if you send 2 or more notifications with the same tag they will replace the previous one instead of being shown one after another
        renotify: false, // If set to `false` and used in conjunction with a tag, then you have very passive notifications that appear one at a time and only vibrate on the first show. If set to true and used with a tag it will replace the previous but vibrate each time

        // Following options create buttons at the bottom of the notification
        actions: [
          {
            action: 'confirm', // Any string can be value, used as an ID
            title: 'Okay',
            icon: '/src/images/icons/app-icon-96x96.png'
          },
          {
            action: 'cancel',
            title: 'Cancel',
            icon: '/src/images/icons/app-icon-96x96.png'
          }
        ]
      };

      serviceWorkerRegistration.showNotification(title, options);
    });
  }
}

//*---------------------------------------------------------

// This function creates a subscription for the current user's device and stores that info to a database
function configurePushSubscription() {
  if (!('serviceWorker' in navigator)) {
    return;
  }

  let registration;

  navigator.serviceWorker.ready
    .then(serviceWorkerRegistration => {
      registration = serviceWorkerRegistration;
      return serviceWorkerRegistration.pushManager.getSubscription();
    })
    // Each browser device combo yields one subscription, if the user opens the PWA on a new browser in the same device it's considered a new app with it's own service worker scope
    .then(subscription => {
      // Create new subscription
      if (subscription === null) {
        // Generated by `web-push` package, see below
        const vapidPublicKey =
          'BLTKXRXVqFGoEIffVm3_NZYmickzGW19oEnupesF8pm0EiBPToOzkoasBRC6xOz5_mrtIl-FjvCSPeVDkf_esN0';

        return registration.pushManager.subscribe({
          userVisibleOnly: true,
          // Below options are needed to keep push notifcations secure, without them if a hacker gets ur API endpoint, they can send notifications to your users who will think it's from you
          // Install web-push package and run the following command only once `yarn run web-push generate-vapid-keys`
          // This will generate a public and private key, the latter will be hosted on out push notification server, the public key will be sent below
          applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey)
        });
      }
      // We have a subscription already so do nothing...
      else {
      }
    })
    .then(newSubscription => {
      // `newSubscription` is an object sent from the vendor's servers, it contains an "endpoint" key which holds a link to the vendor's API where to send push messages
      // It also contains a "keys" key which holds the security info
      // This object contains all the info you need to send push notifications so store it on your server below
      return fetch('https://pwagram-ec297.firebaseio.com/subscriptions.json', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json'
        },
        body: JSON.stringify(newSubscription)
      })
        .then(response => {
          sendNotification();
        })
        .catch(err => console.log(err));
    });
}
